#!/usr/bin/env perl
###############################################################################
# Copyright (c) 2011 by bgvanbur
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
###############################################################################
# convert images to asm files for megadrive/megacd development
###############################################################################

use strict;
use warnings;

use Image::Magick;

use FindBin;
use lib $FindBin::Bin;
use SCDTools::Palette;

# Graphics::Magick doesn't appear to have easy way to get pixel alpha value

my $palette = SCDTools::Palette->new();

if ( $#ARGV < 0 ) {
    &Help();
}

my $outputTiles = '';
my $outputTilesBin = 0;
my $outputTileMap = '';
my $outputTileMapBin = 0;
my $outputAllOrder = '';
my $outputAllFile = '';

my $paletteFile = '';
my $paletteOffset = 0;
my $paletteCount = 1;

my $tilesFile = '';
my $tilesOffset = 0;
my $tilesCount = 0;
my $tilesCompress = 0;
my $tilesWidth = 32;
my $tilesWidthShift = 5;
# default to plane (plane tile order and tile reuse)
my $tilesOrderPlane = 1;
my $tilesReuse = 0;
my $tilesOrderMattered = 0;

my $tileMapOffset = 0;
my $tileMapWidth = 1;
my $tileMapWidthBad = 0;

my $comments = 1;
my $labels = 1;
my $label = '';
my $grey = 0;
my $dither4x2 = 0;
my $dither2x2 = 0;
my $ditherFS = 0;
my $ditherR = 0;

my $verbosity = 2;

# [ 0 3 ]
# [ 2 1 ]
my @orderDitherMatrix2x2 = ( 0, 3, 2, 1 );

# [ 0 6 1 7 ]
# [ 4 2 5 3 ]
my @orderDitherMatrix4x2 = ( 0, 6, 1, 7, 4, 2, 5, 3 );

my @imgFiles;
my @tiles;
my @tileMapRows;

my $missingTiles = 0;

my $tmpFile = 'TMP.BIN';
my $tmpFileRemoveAfterUse = 1;

my $img;
my $imgAlpha = 0;

foreach my $arg (@ARGV) {
    if ( $palette->ParseArg($arg) ) {
	# do nothing
    } elsif ( $arg =~ /^-asmtiles=(.*)$/i ) {
	$outputTiles = $1;
	$outputTilesBin = 0;
    } elsif ( $arg =~ /^-asmmap=(.*)$/i ) {
	$outputTileMap = $1;
	$outputTileMapBin = 0;
    } elsif ( $arg =~ /^-bintiles=(.*)$/i ) {
	$outputTiles = $1;
	$outputTilesBin = 1;
    } elsif ( $arg =~ /^-binmap=(.*)$/i ) {
	$outputTileMap = $1;
	$outputTileMapBin = 1;
    } elsif ( $arg =~ /^-asm=([mpt]+),(.*)$/i ) {
	$outputAllOrder = $1;
	$outputAllFile = $2;
    } elsif ( $arg =~ /^-tilesfile=(.+)$/i ) {
	$tilesFile = $1;
    } elsif ( $arg =~ /^-tilesbyteoffset=(\d+)/i ) {
	$tilesOffset = $1;
    } elsif ( $arg =~ /^-tilesoffset=(\d+)$/i ) {
	$tilesOffset = 32 * $1;
    } elsif ( $arg =~ /^-tilescount=(\d+)$/i ) {
	$tilesCount = $1;
    } elsif ( $arg =~ /^-compress=(\d+)$/i ) {
	$tilesCompress = $1;
    } elsif ( $arg =~ /^-mapoffset=(\d+)$/i ) {
	$tileMapOffset = $1;
    } elsif ( $arg =~ /^-mapoffset=(0x|\$)([0-9A-Fa-f]+)$/i ) {
	$tileMapOffset = $1;
    } elsif ( $arg =~ /^-mapwidth=([12])$/i ) {
	$tileMapWidth = $1;
    } elsif ( $arg =~ /^-sprite$/i ) {
	$tilesOrderPlane = 0;
	$tilesReuse = 0;
    } elsif ( $arg =~ /^-plane$/i ) {
	$tilesOrderPlane = 1;
	$tilesReuse = 0;
    } elsif ( $arg =~ /^-planewithmap$/i ) {
	$tilesOrderPlane = 1;
	$tilesReuse = 1;
    } elsif ( $arg =~ /^-gr[ae]y$/i ) {
	$grey = 1;
    } elsif ( $arg =~ /^-dither=4x2$/i ) {
	$dither4x2 = 1;
    } elsif ( $arg =~ /^-dither=2x2$/i ) {
	$dither2x2 = 1;
    } elsif ( $arg =~ /^-dither=fs$/i ) {
	$ditherFS = 1;
    } elsif ( $arg =~ /^-dither=r$/i ) {
	$ditherR = 1;
    } elsif ( $arg =~ /^-nocomments$/i ) {
	$comments = 0;
    } elsif ( $arg =~ /^-nolabels$/i ) {
	$labels = 0;
    } elsif ( $arg =~ /^-label=(.+)$/i ) {
	$label = $1;
    } elsif ( $arg =~ /^-v=(\d+)$/i ) {
	$verbosity = $1;
    } elsif ( -e $arg ) {
	push @imgFiles, $arg;
    } else {
	print STDERR "\nCould not parse argument: $arg\n";
	&Help();
    }
}

if ( $#imgFiles < 0 ) {
    print STDERR "\nNeed to specify image files\n";
    &Help();
}

if ( $tilesCompress == 1 ) {
    $tilesWidth = 16;
    $tilesWidthShift = 4;
} elsif ( $tilesCompress == 2 ) {
    $tilesWidth = 8;
    $tilesWidthShift = 3;
} elsif ( $tilesCompress != 0 ) {
    die "Unsupported compress argument\n";
}

if ( $label eq '' && $#imgFiles == 0 ) {
    $label = $imgFiles[0];
    $label =~ s/\..*$//g;
    $label =~ s/[^A-Za-z0-9]//g;
}

$palette->ReadPalette();
&ReadTiles();

foreach my $imgFile (@imgFiles) {
    &Img2Tile($imgFile);
}

# TODO print missing colors?

if ( $outputAllOrder ne '' ) {
    &OutputAll();
} else {
    $palette->OutputPalette();
    &OutputTiles();
    &OutputTileMap();
}

$palette->PrintMissingColors();

###############################################################################

sub ReadTiles {
    if ( $tilesFile eq '' ) {
	return;
    }
    if ( ! -e $tilesFile ) {
	die "Bad tiles file: $tilesFile";
    }
    my $tmpFileRemove = 0;
    if ( $tilesFile =~ m/\.(asm|68k)$/i ) {
	my $tilesAsmFile = $tilesFile;
	$tilesFile = $tmpFile;
	$tmpFileRemove = $tmpFileRemoveAfterUse;
	system("scdasm -v=$verbosity $tilesAsmFile $tilesFile");
	if ( ! -e $tilesFile ) {
	    die "Bad scdasm since didn't make: $tilesFile";
	}
    }

    if ( $tilesCount <= 0 ) {
	$tilesCount = ( ( -s $tilesFile ) - $tilesOffset ) >> $tilesWidthShift;
    }

    my $tilesCountInBytes = $tilesCount*$tilesWidth;
    my $tilesData = chr(0x00)x$tilesCountInBytes;

    open( TILES, $tilesFile ) or die "Cannot read tiles file: $!\n";
    binmode TILES;
    seek(TILES,$tilesOffset,0);
    my $tilesDataBuffer;
    if ( read(TILES,$tilesDataBuffer,$tilesCountInBytes) == $tilesCountInBytes ) {
	$tilesData = $tilesDataBuffer;
	for ( my $tilesIndex = 0; $tilesIndex < $tilesCount; $tilesIndex++ ) {
	    my $tileData = chr(0x00)x32;
	    if ( $tilesCompress == 0 ) {
		$tileData = substr($tilesData,$tilesIndex*$tilesWidth,$tilesWidth);
	    } else {
		# TODO
		die "Cannot handle unextracting compressed tiles yet\n";
	    }
	    push @tiles, $tileData;
	}
    }
    close TILES;

    if ( $tmpFileRemove ) {
	unlink $tmpFile;
    }
}

sub Img2Tile($) {
    my ($imgFile) = @_;

    $img = Image::Magick->new();
    my $x = $img->ReadImage($imgFile);
    warn $x if $x;
    $imgAlpha = $img->Get('matte');
    my $width = $img->Get('width');
    my $height = $img->Get('height');

    # TODO an attempt to look at dithering
    if ( $ditherFS || $ditherR ) {
	my $imgPalette = Image::Magick->new();
	$palette->UpdateImageMagickPalette($imgPalette);
    
	if ( $ditherFS ) {
	    $img->Remap('image'=>$imgPalette,'dither'=>'true','dither-method'=>'Floyd-Steinberg');
	} elsif ( $ditherR ) {
	    $img->Remap('image'=>$imgPalette,'dither'=>'true','dither-method'=>'Riemersma');
	}
    }

    my $w = int($width / 8);
    my $h = int($height / 8);

    if ( $w > 1 || $h > 1 ) {
	$tilesOrderMattered = 1;
    }

    if ( $tilesOrderPlane ) {
	# plane order
	for ( my $y = 0; $y < $height; $y += 8 ) {
	    my $tileMapRow;
	    for ( my $x = 0; $x < $width; $x += 8 ) {
		my $tileIndex = &ReadImgTile($x,$y);
		if ( $tileMapWidth == 1 ) {
		    if ( $tileIndex < 0 || $tileIndex > 0xFF ) {
			$tileMapWidthBad = 1;
		    } else {
			$tileMapRow .= chr($tileIndex);
		    }
		} elsif ( $tileMapWidth == 2 ) {
		    if ( $tileIndex < 0 || $tileIndex > 0xFFFF ) {
			$tileMapWidthBad = 1;
		    } else {
			$tileMapRow .= pack("n",$tileIndex);
		    }
		} else {
		    die "Unsupported map width\n";
		}
	    }
	    push @tileMapRows, $tileMapRow;
	}
    } else {
	# sprite order
	for ( my $x = 0; $x < $width; $x += 8 ) {
	    for ( my $y = 0; $y < $height; $y += 8 ) {
		&ReadImgTile($x,$y);
	    }
	}
    }
}

# process an 8x8 tile
sub ReadImgTile {
    my ($x,$y) = @_;
    my $tile = '';
    my $a = 0;
    my $y2;
    my $x2;
    my $i;
    my $valueHi;
    my $valueLo;
    my $tileUsed = -1;
    for ( my $subrow = 0; $subrow < 8; $subrow++ ) {
	# process each of the resulting four bytes
	$y2 = $y+$subrow;
	for ( $i = 0; $i < 4; $i++ ) {
	    $x2 = $x+2*$i;
	    # process two pixels for a hi and lo nibble
	    $valueHi = &GetPaletteIndex($img,$x2,$y2);
	    $valueLo = &GetPaletteIndex($img,$x2+1,$y2);
	    $tile .= chr(( $valueHi << 4 ) | $valueLo);
	}
    }
    # TODO for 2 byte map entries, allow tile flips?
    if ( $tilesReuse ) {
	for ( my $tileIndex = 0; $tileIndex <= $#tiles; $tileIndex++ ) {
	    if ( $tiles[$tileIndex] eq $tile ) {
		$tileUsed = $tileIndex + $tileMapOffset;
		last;
	    }
	}
	if ( $tileUsed < 0 ) {
	    $missingTiles++;
	}
    }
    if ( $tileUsed < 0 ) {
	push @tiles, $tile;
	$tileUsed = $#tiles + $tileMapOffset;
    }
    return $tileUsed;
}

# performance
my %cacheGetPaletteIndex;

# convert a normalized RGBA value to a sega palette index
sub GetPaletteIndex {
    my ($img,$x,$y) = @_;
    # if fully transparent, shortcut out with transparent index
    if ( $imgAlpha ) {
	my $a = $img->GetPixel('channel'=>'Alpha','normalize'=>1,'x'=>$x,'y'=>$y);
	if ( defined $a && $a == 1 ) {
	    return 0;
	}
    }
    my ($r,$g,$b) = $img->GetPixel('channel'=>'RGB','normalize'=>1,'x'=>$x,'y'=>$y);
    # 0x00-0x1F,0x20-0x3F...
    my $orderedDitherAdd = 0;
    if ( $dither4x2 ) {
	$orderedDitherAdd = $orderDitherMatrix4x2[(4*($y & 1)+($x & 3))] << 2;
    } elsif ( $dither2x2 ) {
	$orderedDitherAdd = $orderDitherMatrix2x2[(2*($y & 1)+($x & 1))] << 3;
    }
    my $color;
    if ( $grey ) {
	my $avg = int((85*($r+$g+$b)+$orderedDitherAdd)>>5);
	if ( $avg > 7 ) {
	    $avg = 7;
	}
	$color = chr($avg<<1).chr(($avg<<5)|($avg<<1));
    } else {
	# TODO add in orderedDitherAdd
	$color = &SCDTools::Palette::ConvertRGBNormalizedToVDPColor($r,$g,$b);
    }

    my $index = -1;
    if ( exists $cacheGetPaletteIndex{$color} ) {
	$index = $cacheGetPaletteIndex{$color};
    }
    if ( $index < 0 ) {
	$index = $palette->GetColorIndex($color);
    }

    $cacheGetPaletteIndex{$color} = $index;

    if ( $index < 0 ) {
	$index = 0;
    }

    return $index;
}

sub OutputAll {
    if ( $outputAllOrder eq '' || $outputAllFile eq '' ) {
	return;
    }
    my $outputAllOrderLength = length($outputAllOrder);
    my $fileContents = '';
    for ( my $i = 0; $i < $outputAllOrderLength; $i++ ) {
	my $outputType = substr($outputAllOrder,$i,1);
	# pass zero to indicate assembly output data
	if ( $outputType eq 'p' ) {
	    $fileContents .= $palette->GetOutputPaletteData(0);
	} elsif ( $outputType eq 't' ) {
	    $fileContents .= &GetOutputTilesData(0);
	} elsif ( $outputType eq 'm' ) {
	    $fileContents .= &GetOutputTileMapData(0);
	} else {
	    die "Unsupported asm order character: $outputType\n";
	}
    }
    open(ALL,'>'.$outputAllFile);
    print ALL $fileContents;
    close ALL;
}

sub OutputTiles {
    if ( $outputTiles eq '' ) {
	return;
    }
    my $fileContents = &GetOutputTilesData($outputTilesBin);
    open(TILES,'>'.$outputTiles);
    if ( $outputTilesBin ) {
	binmode TILES;
    }
    print TILES $fileContents;
    close TILES;
}

sub GetOutputTilesData {
    my ($bin) = @_;
    if ( $#tiles < 0 ) {
	return '';
    }
    my $fileContents = '';
    if ( ! $bin ) {
	if ( $comments ) {
	    if ( ! $tilesOrderMattered ) {
		$fileContents .= " ;; tile data\n";
	    } elsif ( ! $tilesOrderPlane ) {
		$fileContents .= " ;; sprite order tile data\n";
	    } elsif ( $tilesReuse ) {
		$fileContents .= " ;; plane order tile data with reuse\n";
	    } else {
		$fileContents .= " ;; plane order tile data with no reuse\n";
	    }
	    if ( $tilesCompress ) {
		$fileContents .= " ;; compressed $tilesCompress\n";
	    }
	}
	if ( $labels ) {
	    $fileContents .= "Start${label}Tiles:\n";
	}
    }
    for ( my $tileIndex = 0; $tileIndex <= $#tiles; $tileIndex++ ) {
	if ( ! $bin && $comments ) {
	    $fileContents .= sprintf(" ;; tile \$%2.2X\n",$tileIndex+$tileMapOffset);
	}
	if ( $tilesCompress == 0 ) {
	    if ( $bin ) {
		$fileContents .= $tiles[$tileIndex];
	    } else {
		for ( my $i = 0; $i < length($tiles[$tileIndex]); $i += 4 ) {
		    $fileContents .= sprintf(" dc.l \$%8.8X\n",unpack("N",substr($tiles[$tileIndex],$i,4)));
		}
	    }
	} elsif ( $tilesCompress == 1 ) {
	    for ( my $i = 0; $i < length($tiles[$tileIndex]); $i += 4 ) {
		my $v0 = unpack("n",substr($tiles[$tileIndex],$i,2));
		my $v1 = unpack("n",substr($tiles[$tileIndex],$i+2,2));
		my $value = $v0 | ( $v1 << 2 );
		if ( $bin ) {
		    $fileContents .= pack("n",$value);
		} else {
		    $fileContents .= sprintf(" dc.w \$%4.4X\n",$value);
		}
	    }
	} elsif ( $tilesCompress == 2 ) {
	    for ( my $i = 0; $i < length($tiles[$tileIndex]); $i += 8 ) {
		my $v0 = unpack("n",substr($tiles[$tileIndex],$i,2));
		my $v1 = unpack("n",substr($tiles[$tileIndex],$i+2,2));
		my $v2 = unpack("n",substr($tiles[$tileIndex],$i+4,2));
		my $v3 = unpack("n",substr($tiles[$tileIndex],$i+6,2));
		my $value = $v0 | ( $v1 << 1 ) | ( $v2 << 2 ) | ( $v3 << 3 );
		if ( $bin ) {
		    $fileContents .= pack("n",$value);
		} else {
		    $fileContents .= sprintf(" dc.w \$%4.4X\n",$value);
		}
	    }
	} else {
	    die "Unsupported compress argument\n";
	}
    }
    if ( ! $bin && $labels ) {
	$fileContents .= "End${label}Tiles:\n";
    }
    return $fileContents;
}

sub OutputTileMap {
    if ( $outputTileMap eq '' ) {
	return;
    }
    my $fileContents = &GetOutputTileMapData($outputTileMapBin);
    open(TILEMAP,'>'.$outputTileMap);
    if ( $outputTileMapBin ) {
	binmode TILEMAP;
    }
    print TILEMAP $fileContents;
    close TILEMAP;
}

sub GetOutputTileMapData {
    my ($bin) = @_;
    if ( $#tileMapRows < 0 ) {
	return '';
    }
    if ( $tileMapWidthBad ) {
	die "Bad tile index data for map width\n";
    }
    my $fileContents = '';
    if ( ! $bin ) {
	my $w = int(length($tileMapRows[0])/$tileMapWidth);
	my $h = $#tileMapRows+1;
	if ( $comments ) {
	    if ( $tilesOrderPlane ) {
		$fileContents .= " ;; plane order tile map (${w}x${h})\n";
	    } else {
		$fileContents .= " ;; sprite order tile map (${w}x${h})\n";
	    }
	}
	if ( $labels ) {
	    $fileContents .= "${label}TileWidth: equ ${w}\n";
	    $fileContents .= "${label}TileHeight: equ ${h}\n";
	    $fileContents .= "Start${label}Map:\n";
	}
    }
    my $y = 0;
    foreach my $tileMapRow (@tileMapRows) {
	if ( ! $bin ) {
	    if ( $tileMapWidth == 1 ) {
		$fileContents .= " dc.b ";
	    } elsif ( $tileMapWidth == 2 ) {
		$fileContents .= " dc.w ";
	    } else {
		die "Unsupported map width\n";
	    }
	}
	my $tileMapRowLength = length($tileMapRow);
	for ( my $i = 0; $i < $tileMapRowLength; $i += $tileMapWidth ) {
	    if ( $bin ) {
		$fileContents .= substr($tileMapRow,$i,$tileMapWidth);
	    } else {
		if ( $i ) {
		    # asl has a max of 20 items per line
		    # 16 is a nicer binary based number
		    if ( $i % 16 == 0 ) {
			if ( $tileMapWidth == 1 ) {
			    $fileContents .= "\n dc.b ";
			} elsif ( $tileMapWidth == 2 ) {
			    $fileContents .= "\n dc.w ";
			} else {
			    die "Unsupported map width\n";
			}
		    } else {
			$fileContents .= ',';
		    }
		}
		if ( $tileMapWidth == 1 ) {
		    $fileContents .= sprintf("\$%2.2X",ord(substr($tileMapRow,$i,1)));
		} elsif ( $tileMapWidth == 2 ) {
		    $fileContents .= sprintf("\$%4.4X",unpack("n",substr($tileMapRow,$i,2)));
		} else {
		    die "Unsupported map width\n";
		}
	    }
	}
	if ( ! $bin ) {
	    $fileContents .= "\n";
	    if ( $labels && $y == 0 ) {
		$fileContents .= "StartRow${label}Map:\n";
	    }
	}
	$y++;
    }
    if ( ! $bin && $labels ) {
	$fileContents .= "End${label}Map:\n";
    }
    return $fileContents;
}

sub Help {
    die '
scdimg2tile [options] <imgfiles...>

[description]
  converts images to the Sega VDP format files

'.$palette->GetHelpString().'[options]
  -asmtiles=<file>      output tiles to assembly file
  -asmmap=<file>        output tile map to assembly file
  -bintiles=<file>      output tiles to binary file
  -binmap=<file>        output tile map to binary file
  -asm=<order>,<file>   output palette, tiles, and/or tile map to assembly file
                        <order>=p: palette position in assembly output
                        <order>=t: tiles position in assembly output
                        <order>=m: tile map position in assembly output
                        example: -asm=mt,IMG.ASM outputs tile map then tiles
  -tilesfile=<file>     specifies the tiles
  -tilesoffset=<#>      tile offset of the first tile in the tiles file
  -tilesbyteoffset=<#>  byte offset of the first tile in the tiles file
  -tilescount=<#>       specifies the number of tiles in use
  -tilescompress=<#>    compresses the tiles for reduced colors
                        <#>=0: no compression (16 colors, default)
                        <#>=1: compress to 2 bit color map (4 colors)
                        <#>=2: compress to 1 bit color map (2 colors)
  -mapoffset=<#>        the offset for the tile indexes in the tile map
                        can specify decimal using no prefix
                        can specify hexadecimal number using $ or 0x prefix
  -mapwidth=<#>         specifies the map entry width in bytes (default is 1)
  -plane                specifies plane tile order and no tile reuse (default)
  -planewithmap         specifies plane tile order and tile reuse
  -sprite               specifies sprite tile order and no tile reuse
  -nocomments           do not print any comments in out
  -nolabels             do not print any labels in out
  -label=<name>         labels use <name> to make useful labels
                        example: Start<name>Tiles:
  -grey                 averages colors for using greyscale palette
  -dither=4x2           ordered dither using 4x2 matrix (only -grey for now)
  -dither=2x2           ordered dither using 2x2 matrix (only -grey for now)
  -dither=fs            dither using Floyd-Steinberg
  -dither=r             dither using Riemersma
  -v=<#>                specify verbosity

';
}

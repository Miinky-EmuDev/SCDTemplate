#!/usr/bin/env perl
###############################################################################
# Copyright (c) 2011 by bgvanbur
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
###############################################################################
# convert images to asm files for megadrive/megacd development
###############################################################################

# TODO ability to change imgLabel?
# TODO more verbosity...
# TODO affect colorCount, dithering at the three stages

use strict;
use warnings;
use Image::Magick;

if ( $#ARGV < 0 ) {
    &Help();
}

my $verbosity = 2;

my $magicPink = 0;
my $magicBlack = 0;
my $colorCountMax = 15;

my @imgFiles;

foreach my $arg (@ARGV) {
    if ( $arg =~ /^-magicpink$/i ) {
	$magicPink = 1;
    } elsif ( $arg =~ /^-magicblack$/i ) {
	$magicBlack = 1;
    } elsif ( -e $arg ) {
	push @imgFiles, $arg;
    } else {
	print STDERR "\nCould not parse argument: $arg\n";
	&Help();
    }
}

foreach my $imgFile (@imgFiles) {
    &ImgExtractColors($imgFile);
}



###############################################################################


sub ImgExtractColors($) {
    my ($imgFile) = @_;

    my $imgLabel = $imgFile;
    $imgLabel =~ s/\..*$//g;
    $imgLabel =~ s/[^A-Za-z0-9]//g;

    my $img = Image::Magick->new();
    my $x = $img->ReadImage($imgFile);
    warn $x if $x;

    # $img->Extent('width'=>256,'height'=>224,'x'=>-32,'y'=>0,'background'=>'rgb(0,0,0)');

    my @colors = &GetSegaColors($img);
    my $colorsLength = $#colors + 1;

    my $imgPalette = Image::Magick->new();
    $imgPalette->Set(size=>"${colorsLength}x1");
    $x = $imgPalette->ReadImage('xc:black');
    warn $x if $x;

    for ( my $x = 0; $x < $colorsLength; $x++ ) {
	my $c = $colors[$x];
	my @pixels = ( ( ( ( ord(substr($c,1,1)) >> 1 ) & 7 ) * 32 / 255.0 + 1/32.0 ),
		       ( ( ( ord(substr($c,1,1)) >> 5 ) & 7 ) * 32 / 255.0 + 1/32.0 ),
		       ( ( ( ord(substr($c,0,1)) >> 1 ) & 7 ) * 32 / 255.0 + 1/32.0 ) );
	$imgPalette->SetPixel('channel'=>'RGB','x'=>$x,'y'=>0,'color'=>\@pixels);
    }
    
    print "Writing p0.png (VDP color palette for original image)\n";
    $imgPalette->Write('p0.png');

    if ( $colorsLength > $colorCountMax ) {
	$img->Remap('image'=>$imgPalette,dither=>'true','dither-method'=>'Floyd-Steinberg');
	#$img->Remap('image'=>$imgPalette,dither=>'true');
	#$img->Remap('image'=>$imgPalette,dither=>'false');

	print "Writing a0.png (mapped to VDP colors, too many colors for single palette still)\n";
	$img->Write('a0.png');

	undef $imgPalette;

	if ( 1 ) {
	    undef $img;

	    $img = Image::Magick->new();
	    $x = $img->ReadImage($imgFile);
	    warn $x if $x;
	}

	$img->Quantize('colors'=>$colorCountMax,'measure_error'=>'true','treedepth'=>8,'dither'=>'true','dither-method'=>'Floyd-Steinberg');
	#$img->Quantize('colors'=>$colorCountMax,'measure_error'=>'true','treedepth'=>8,'dither'=>'true');
	#$img->Quantize('colors'=>$colorCountMax,'measure_error'=>'true','treedepth'=>8,'dither'=>'false');

	print "Writing a1.png (quantized to $colorCountMax VDP colors)\n";
	$img->Write('a1.png');

	@colors = &GetSegaColors($img);
	$colorsLength = $#colors + 1;

	if ( $colorsLength < $colorCountMax ) {
	    if ( $magicPink ) {
		push @colors, chr(0x0E).chr(0x0E);
		$colorsLength++;
	    } elsif ( $magicBlack ) {
		push @colors, chr(0x00).chr(0x00);
		$colorsLength++;
	    }
	} elsif ( $colorsLength > $colorCountMax ) {
	    print STDERR "Quantization went beyond color count\n";
	    $colorsLength = $colorCountMax;
	}

	print "Quantization resulted in $colorsLength VDP colors\n";

	$imgPalette = Image::Magick->new();
	$imgPalette->Set(size=>"${colorsLength}x1");
	$x = $imgPalette->ReadImage('xc:black');
	warn $x if $x;

	for ( my $x = 0; $x < $colorsLength; $x++ ) {
	    my $c = $colors[$x];
	    my @pixels = ( ( ( ( ord(substr($c,1,1)) >> 1 ) & 7 ) * 32 / 255.0 + 1/32.0 ),
			   ( ( ( ord(substr($c,1,1)) >> 5 ) & 7 ) * 32 / 255.0 + 1/32.0 ),
			   ( ( ( ord(substr($c,0,1)) >> 1 ) & 7 ) * 32 / 255.0 + 1/32.0 ) );
	    $imgPalette->SetPixel('channel'=>'RGB','x'=>$x,'y'=>0,'color'=>\@pixels);
	}
    
	print "Writing p1.png (VDP color palette after quantization)\n";
	$imgPalette->Write('p1.png');

	undef $img;

	$img = Image::Magick->new();
	$x = $img->ReadImage($imgFile);
	warn $x if $x;
    } else {
	print "Image only has $colorsLength VDP colors\n";
    }

    $img->Remap('image'=>$imgPalette,dither=>'true','dither-method'=>'Floyd-Steinberg');
    #$img->Remap('image'=>$imgPalette,dither=>'true');
    #$img->Remap('image'=>$imgPalette,dither=>'false');

    print "Writing a2.png (original image dithered to quatized colors)\n";
    $img->Write('a2.png');
}

sub GetSegaColors {
    my $img = $_[0];

    my %colors;

    my $width = $img->Get('width');
    my $height = $img->Get('height');
    my $alpha = $img->Get('matte');

    for ( my $y = 0; $y < $height; $y++ ) {
	for ( my $x = 0; $x < $width; $x++ ) {
	    my $a = 0;
	    if ( $alpha ) {
		$a = $img->GetPixel('channel'=>'Alpha','normalize'=>1,'x'=>$x,'y'=>$y);
		if ( $a > 0.95 ) {
		    next;
		}
	    }
	    my ($r,$g,$b) = $img->GetPixel('channel'=>'RGB','normalize'=>1,'x'=>$x,'y'=>$y);
	    my $color = chr(int((255*$b)>>5)<<1).chr((int((255*$g)>>5)<<5)|(int((255*$r)>>5)<<1));
	    if ( ( $alpha && defined $a && $a == 1 ) ||
		 ( $magicPink && $color eq (chr(0x0E).chr(0x0E)) ) ||
		 ( $magicBlack && $color eq (chr(0x00).chr(0x00)) ) ) {
		next;
	    }
	    #if ( ! exists $colors{$color} ) {
	    #printf("%4.4X\n",unpack("n",$color));
	    #}
	    $colors{$color}++;
	}
    }

    return sort {$colors{$b} <=> $colors{$a}} keys %colors;
}

sub Help {
    die '
scdimgvdppalette [options] <imgfiles>

[description]
  Convert image to Sega VDP palette with dithering/quantization.
  It is suggested to avoid transparency since they can become partially
  transparent in the process and typically result in ugly edges.
  Still a work in progress.

[options]
  -magicpink          treat #FF00FF as transparent
  -magicblack         treat #000000 as transparent

';
}
